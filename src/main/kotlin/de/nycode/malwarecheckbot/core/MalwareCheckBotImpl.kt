package de.nycode.malwarecheckbot.core

import de.nycode.malwarecheckbot.commands.InfoCommand
import de.nycode.malwarecheckbot.config.Config
import de.nycode.malwarecheckbot.filtering.MalwareDetector
import de.nycode.malwarecheckbot.filtering.caching.RedisMalwareCache
import de.nycode.malwarecheckbot.listener.registerChatListener
import de.nycode.malwarecheckbot.listener.registerJoinListener
import de.nycode.malwarecheckbot.listener.registerUpdateListener
import de.nycode.malwarecheckbot.storage.GuildInformation
import de.nycode.malwarecheckbot.utils.createMongoClient
import dev.kord.core.Kord
import dev.kord.core.entity.Guild
import dev.kord.core.event.message.MessageCreateEvent
import io.lettuce.core.RedisClient
import io.lettuce.core.api.coroutines
import io.lettuce.core.api.coroutines.RedisCoroutinesCommands
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlin.concurrent.thread

internal class MalwareCheckBotImpl : MalwareCheckBot {

    override val coroutineContext = Dispatchers.IO + SupervisorJob()

    override lateinit var kord: Kord

    override lateinit var repositories: MongoRepositories

    override lateinit var redis: RedisCoroutinesCommands<String, String>

    override lateinit var malwareDetector: MalwareDetector

    suspend fun start() {

        Runtime.getRuntime().addShutdownHook(thread(start = false) {
            repositories.client.close()
        })

        kord = Kord(Config.DISCORD_TOKEN)

        repositories = initializeDatabase()
        redis = initializeRedis()

        malwareDetector = MalwareDetector(RedisMalwareCache(redis))

        InfoCommand.register(kord)

        registerJoinListener()
        registerChatListener()
        registerUpdateListener()

        kord.login {
            watching("for Malware")
        }
    }

    private fun initializeDatabase(): MongoRepositories {
        val client = createMongoClient(Config.MONGO_CONNECTION_STRING)
        val database = client.getDatabase(Config.MONGO_DATABASE)

        val guildCollection = database.getCollection<GuildInformation>()

        return MongoRepositories(client, guildCollection)
    }

    private fun initializeRedis(): RedisCoroutinesCommands<String, String> {
        val redisClient = RedisClient.create(Config.REDIS_URI)
        return redisClient.connect().coroutines()
    }

    override suspend fun Guild.information(): GuildInformation? = repositories.guilds.findOneById(id)
    override suspend fun MessageCreateEvent.information(): GuildInformation? =
        guildId?.let { repositories.guilds.findOneById(it) }
}
