package de.nycode.malwarecheckbot.filtering.safebrowsing

import io.ktor.client.request.HttpRequestBuilder
import kotlinx.serialization.Serializable

@Serializable
data class SafeBrowsingRequest(
    val client: ClientInfo,
    val threatInfo: ThreatInfo
)

fun HttpRequestBuilder.createSafeBrowsingRequestBody(builder: SafeBrowsingRequestBuilder.() -> Unit): SafeBrowsingRequest {
    val safeBrowsingRequestBuilder = SafeBrowsingRequestBuilder().apply(builder)
    return safeBrowsingRequestBuilder.toRequest()
}

data class SafeBrowsingRequestBuilder(
    var client: ClientInfo = ClientInfo("", ""),
    var threatInfo: ThreatInfo = ThreatInfo(emptyList(), emptyList(), emptyList(), emptyList())
) {
    fun client(builder: SafeBrowsingClientInfoBuilder.() -> Unit) {
        val clientInfoBuilder = SafeBrowsingClientInfoBuilder("", "").apply(builder)
        client = clientInfoBuilder.toClientInfo()
    }

    fun threatInfo(builder: ThreatInfoBuilder.() -> Unit) {
        val threatInfoBuilder = ThreatInfoBuilder(emptyList(), emptyList(), emptyList(), emptyList()).apply(builder)
        threatInfo = threatInfoBuilder.toThreatInfo()
    }

    fun toRequest() = SafeBrowsingRequest(client, threatInfo)
}

data class ThreatInfoBuilder(
    var threatTypes: List<ThreatType>,
    var platformTypes: List<PlatformType>,
    var threatEntryTypes: List<ThreatEntryType>,
    var threatEntries: List<ThreatEntry>
) {
    fun toThreatInfo() = ThreatInfo(threatTypes, platformTypes, threatEntryTypes, threatEntries)
}

data class SafeBrowsingClientInfoBuilder(
    var id: String,
    var version: String
) {
    fun toClientInfo() = ClientInfo(id, version)
}
