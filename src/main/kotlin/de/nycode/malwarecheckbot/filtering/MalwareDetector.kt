package de.nycode.malwarecheckbot.filtering

import de.nycode.malwarecheckbot.config.Config
import de.nycode.malwarecheckbot.filtering.caching.MalwareCache
import de.nycode.malwarecheckbot.filtering.caching.ThreatCacheValue
import de.nycode.malwarecheckbot.filtering.caching.toCacheValue
import de.nycode.malwarecheckbot.filtering.safebrowsing.*
import io.ktor.client.HttpClient
import io.ktor.client.engine.okhttp.OkHttp
import io.ktor.client.features.json.JsonFeature
import io.ktor.client.features.json.serializer.KotlinxSerializer
import io.ktor.client.request.parameter
import io.ktor.client.request.post
import io.ktor.http.ContentType
import io.ktor.http.contentType
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.launch
import kotlin.time.Duration

private const val GOOGLE_SAFE_BROWSING_BASE_URL = "https://safebrowsing.googleapis.com"

class MalwareDetector(private val cache: MalwareCache) {

    private val client = HttpClient(OkHttp) {
        install(JsonFeature) {
            serializer = KotlinxSerializer()
        }
    }

    // https://regex101.com/r/bpCMoW/1
    private val urlRegex =
        "(?:https?://.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b[-a-zA-Z0-9@:%_+.~#?&/=]*".toRegex()

    fun detectUrls(text: String): List<String> {
        return urlRegex.findAll(text).map(MatchResult::value).toList()
    }

    suspend fun checkForMalware(urls: List<String>): List<ThreatCacheValue> = coroutineScope {
        val existingThreats = urls
            .mapNotNull { cache.checkUrl(it) }
            .associateBy { it.key }

        val toFetch = urls.filter { it !in existingThreats.keys }
        val fetched = fetchUrlsFromSafeBrowsingAPI(toFetch).matches
            .asSequence()
            .filter { it.threat.url != null }
            .groupBy { it.threat.url!! }
            .mapValues { it.value.toCacheValue(it.key) }
            .values
            .toList()

        launch {
            fetched.forEach {
                cache.save(it.key, it, Duration.hours(1))
            }
        }

        return@coroutineScope existingThreats.values + fetched
    }

    private suspend fun fetchUrlsFromSafeBrowsingAPI(urls: List<String>) =
        client.post<SafeBrowsingResponse>(GOOGLE_SAFE_BROWSING_BASE_URL) {
            parameter("key", Config.GCP_SAFE_BROWSING_API_KEY)
            contentType(ContentType.Application.Json)
            url {
                path("v4", "threatMatches:find")
            }
            body = createSafeBrowsingRequestBody {
                client {
                    id = "malware-check-discord-bot-nycode"
                    version = "1.0.0-SNAPSHOT"
                }
                threatInfo {
                    platformTypes = PlatformType.values().toList()
                    threatTypes = ThreatType.values().toList()
                    threatEntryTypes = listOf(ThreatEntryType.URL)
                    threatEntries = urls.map { ThreatEntry(url = it) }
                }
            }
        }

}
