package de.nycode.malwarecheckbot.filtering

import de.nycode.malwarecheckbot.config.Config
import de.nycode.malwarecheckbot.filtering.safebrowsing.*
import io.ktor.client.HttpClient
import io.ktor.client.engine.okhttp.OkHttp
import io.ktor.client.features.json.JsonFeature
import io.ktor.client.features.json.serializer.KotlinxSerializer
import io.ktor.client.request.parameter
import io.ktor.client.request.post
import io.ktor.http.ContentType
import io.ktor.http.contentType

private const val GOOGLE_SAFE_BROWSING_BASE_URL = "https://safebrowsing.googleapis.com"

class MalwareDetector {

    private val client = HttpClient(OkHttp) {
        install(JsonFeature) {
            serializer = KotlinxSerializer()
        }
    }

    // https://regex101.com/r/bpCMoW/1
    private val urlRegex =
        "(?:https?://.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b[-a-zA-Z0-9@:%_+.~#?&//=]*".toRegex()

    fun detectUrls(text: String): List<String> {
        return urlRegex.findAll(text).map(MatchResult::value).toList()
    }

    suspend fun checkForMalware(urls: List<String>) = client.post<SafeBrowsingResponse>(GOOGLE_SAFE_BROWSING_BASE_URL) {
        parameter("key", Config.GCP_SAFE_BROWSING_API_KEY)
        contentType(ContentType.Application.Json)
        url {
            path("v4", "threatMatches:find")
        }
        body = createSafeBrowsingRequestBody {
            client {
                id = "malware-check-discord-bot-nycode"
                version = "1.0.0-SNAPSHOT"
            }
            threatInfo {
                platformTypes = PlatformType.values().toList()
                threatTypes = ThreatType.values().toList()
                threatEntryTypes = listOf(ThreatEntryType.URL)
                threatEntries = urls.map { ThreatEntry(url = it) }
            }
        }
    }

}
