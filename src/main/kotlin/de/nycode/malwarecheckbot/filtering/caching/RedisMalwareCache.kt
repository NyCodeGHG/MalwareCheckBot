package de.nycode.malwarecheckbot.filtering.caching

import de.nycode.malwarecheckbot.filtering.safebrowsing.ThreatMatch
import io.lettuce.core.api.coroutines.RedisCoroutinesCommands
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import kotlin.time.Duration

/**
 * [MalwareCache] implementation using Redis.
 * Urls are used as Keys and the [ThreatMatch]es are stored as json inside the db.
 */
class RedisMalwareCache(private val redisConnection: RedisCoroutinesCommands<String, String>) : MalwareCache {
    override suspend fun checkUrl(url: String): List<ThreatMatch>? {
        val cachedJson = redisConnection.get(url) ?: return null
        return Json.decodeFromString<List<ThreatMatch>>(cachedJson)
    }

    override suspend fun save(url: String, matches: List<ThreatMatch>, duration: Duration) {
        val json = Json.encodeToString(matches)
        redisConnection.setex(url, duration.inWholeSeconds, json)
    }
}
