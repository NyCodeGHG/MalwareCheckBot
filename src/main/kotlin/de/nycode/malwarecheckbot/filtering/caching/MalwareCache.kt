package de.nycode.malwarecheckbot.filtering.caching

import de.nycode.malwarecheckbot.filtering.safebrowsing.ThreatMatch
import kotlin.time.Duration

/**
 * Cache abstraction for using different backends for caching threat matches.
 */
interface MalwareCache {

    /**
     * Check if an url is cached.
     * @return null when the url is not cached, otherwise the cached data
     */
    suspend fun checkUrl(url: String): List<ThreatMatch>?

    /**
     * Save a new cache entry for the specified [duration].
     * The [url] will be used as the key.
     * @param url the key used for saving the cache entry
     * @param matches will be serialized and saved into the cache
     * @param duration how long to store the value
     */
    suspend fun save(url: String, matches: List<ThreatMatch>, duration: Duration)
}
