package de.nycode.malwarecheckbot.listener

import de.nycode.malwarecheckbot.core.MalwareCheckBot
import de.nycode.malwarecheckbot.storage.GuildInformation
import de.nycode.malwarecheckbot.utils.Embeds
import de.nycode.malwarecheckbot.utils.Embeds.createEmbed
import dev.kord.common.entity.Permission
import dev.kord.core.event.guild.GuildCreateEvent
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.filterIsInstance
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach

fun MalwareCheckBot.registerJoinListener() =
    kord.events
        .filterIsInstance<GuildCreateEvent>()
        .filter { repositories.guilds.findOneById(it.guild.id) == null }
        .onEach { event ->
            val guild = event.guild

            repositories.guilds.save(
                GuildInformation(
                    guild.id,
                    deleteMaliciousMessages = true,
                    showLinkChecking = true
                )
            )

            if (guild.getSystemChannel()?.getEffectivePermissions(kord.selfId)
                    ?.contains(Permission.SendMessages) == true
            ) {
                guild.systemChannel?.createEmbed(Embeds.info("Beep Boop! :robot:") {
                    description = "Thank you for adding me to your server. \n" +
                            "I will take care of your users from now on and protect them from malware links.\n\n" +
                            ":warning: **Notice:** I'm not a replacement for moderation. I'm not able to detect **every** malicious link.\n\n" +
                            "This Bot uses the [Google Safebrowsing API](https://developers.google.com/safe-browsing) for detecting malicious links.\n" +
                            "**Google works to provide the most accurate and up-to-date information about unsafe web resources. However, Google cannot guarantee that its information is comprehensive and error-free: some risky sites may not be identified, and some safe sites may be identified in error.**"
                })
            }
        }
        .launchIn(this)
