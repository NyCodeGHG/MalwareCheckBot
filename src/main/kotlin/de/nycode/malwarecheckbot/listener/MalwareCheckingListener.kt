package de.nycode.malwarecheckbot.listener

import de.nycode.malwarecheckbot.core.MalwareCheckBot
import de.nycode.malwarecheckbot.utils.Embeds
import de.nycode.malwarecheckbot.utils.Embeds.createEmbed
import dev.kord.core.event.message.MessageCreateEvent
import io.sentry.Sentry
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.filterIsInstance
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach
import kotlinx.datetime.Clock

fun MalwareCheckBot.registerChatListener() = kord.events
    .filterIsInstance<MessageCreateEvent>()
    .filter { it.member?.isBot != true }
    .onEach { event ->
        val content = event.message.content
        val urls = malwareDetector.detectUrls(content)

        // Ignore when message contains no links
        if (urls.isEmpty()) {
            return@onEach
        }

        val transaction = Sentry.startTransaction("checkForMalware()", "task")
        val response = malwareDetector.checkForMalware(urls)
        transaction.finish()

        if (response.isEmpty()) {
            return@onEach
        }

        val information = event.information() ?: return@onEach

        if (information.deleteMaliciousMessages) {
            event.message.delete()
        }

        val platforms = response
            .asSequence()
            .flatMap { it.platforms }
            .sortedBy { it.displayName }
            .toSet()

        val types = response
            .asSequence()
            .flatMap { it.types }
            .sortedBy { it.displayName }
            .toSet()

        event.message.channel.createEmbed(Embeds.warn("Malicious Link Warning") {
            description = "I detected a malicious link in ${event.member?.mention}'s message!"
            types.forEach { type ->
                description += "\n\n${type.warning}"
            }
            field("Types") {
                types.map { it.displayName }.joinToString()
            }
            field("Platforms") {
                platforms.joinToString(separator = " ") { it.emote }
            }
            description += "\n\nPowered by [Google Safebrowsing](https://safebrowsing.google.com/)"
            timestamp = Clock.System.now()
        })
    }
    .launchIn(this)
