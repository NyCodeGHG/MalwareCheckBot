package de.nycode.malwarecheckbot.listener

import de.nycode.malwarecheckbot.core.MalwareCheckBot
import dev.kord.core.behavior.channel.createEmbed
import dev.kord.core.event.message.MessageCreateEvent
import io.sentry.Sentry
import io.sentry.SpanStatus
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.filterIsInstance
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach

fun MalwareCheckBot.registerChatListener() = kord.events
    .filterIsInstance<MessageCreateEvent>()
    .filter { it.member?.isBot != true }
    .onEach { event ->
        val content = event.message.content
        val urls = malwareDetector.detectUrls(content)

        // Ignore when message contains no links
        if (urls.isEmpty()) {
            return@onEach
        }

        val transaction = Sentry.startTransaction("checkForMalware()", "task")
        val response = malwareDetector.checkForMalware(urls)
        transaction.finish()

        if (response.isNotEmpty()) {
            val cachedCount = response.count { it.fromCache }
            val notCachedCount = response.size - cachedCount
            event.message.channel.createEmbed {
                description = "```\n$response\n```"
                footer {
                    text = "$cachedCount from Cache / Fetched $notCachedCount"
                }
            }
        }

    }
    .launchIn(this)
