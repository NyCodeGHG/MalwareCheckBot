package de.nycode.malwarecheckbot.listener

import de.nycode.malwarecheckbot.core.MalwareCheckBot
import de.nycode.malwarecheckbot.storage.GuildInformation
import de.nycode.malwarecheckbot.utils.Embeds
import de.nycode.malwarecheckbot.utils.Embeds.createEmbed
import dev.kord.common.entity.Snowflake
import dev.kord.core.entity.Message
import dev.kord.core.entity.User
import dev.kord.core.entity.channel.DmChannel
import dev.kord.core.event.message.MessageCreateEvent
import dev.kord.core.event.message.MessageUpdateEvent
import io.sentry.Sentry
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.filterIsInstance
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.launch
import kotlinx.datetime.Clock

fun MalwareCheckBot.registerChatListener() = kord.events
    .filterIsInstance<MessageCreateEvent>()
    .filter { it.message.author?.isBot != true }
    .onEach { event ->
        runMalwareChecks(event.message, event.guildId ?: Snowflake.min, event.message.author ?: return@onEach)
    }
    .launchIn(this)

fun MalwareCheckBot.registerUpdateListener() = kord.events
    .filterIsInstance<MessageUpdateEvent>()
    .filter { it.getMessage().author?.isBot != true }
    .onEach { event ->
        val message = event.getMessage()
        runMalwareChecks(message, message.getGuildOrNull()?.id ?: Snowflake.min, message.author ?: return@onEach)
    }
    .launchIn(this)

private suspend fun MalwareCheckBot.runMalwareChecks(message: Message, guildId: Snowflake, user: User) =
    coroutineScope {
        val urls = malwareDetector.detectUrls(message.content)

        // Ignore when message contains no links
        if (urls.isEmpty()) {
            return@coroutineScope
        }

        val transaction = Sentry.startTransaction("checkForMalware()", "task")
        val response = malwareDetector.checkForMalware(urls)
        transaction.finish()

        if (response.isEmpty()) {
            return@coroutineScope
        }

        // This should allow us checking links in DMs
        val information = repositories.guilds.findOneById(guildId) ?: GuildInformation(
            guildId,
            deleteMaliciousMessages = true,
            showLinkChecking = true
        )

        launch {
            if (information.deleteMaliciousMessages && message.getChannel() !is DmChannel) {
                message.delete()
            }
        }

        val platforms = response
            .asSequence()
            .flatMap { it.platforms }
            .sortedBy { it.displayName }
            .toSet()

        val types = response
            .asSequence()
            .flatMap { it.types }
            .sortedBy { it.displayName }
            .toSet()

        message.channel.createEmbed(Embeds.warn("Malicious Link Warning") {
            description = "I detected a malicious link in ${user.mention}'s message!"
            types.forEach { type ->
                description += "\n\n${type.warning}"
            }
            field("Types") {
                types.map { it.displayName }.joinToString()
            }
            field("Platforms") {
                platforms.joinToString(separator = " ") { it.emote }
            }
            description += "\n\nPowered by [Google Safebrowsing](https://safebrowsing.google.com/)"
            timestamp = Clock.System.now()
        })
    }
