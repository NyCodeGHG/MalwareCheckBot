package de.nycode.malwarecheckbot.serialization

import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

object MetadataEntryMapSerializer : KSerializer<Map<String, String>> {
    override val descriptor: SerialDescriptor = ThreatEntryMetadataSurrogate.serializer().descriptor

    override fun deserialize(decoder: Decoder): Map<String, String> {
        val surrogate = decoder.decodeSerializableValue(ThreatEntryMetadataSurrogate.serializer())
        return surrogate.entries.toMap()
    }

    override fun serialize(encoder: Encoder, value: Map<String, String>) {
        val surrogate = ThreatEntryMetadataSurrogate(value.toList())
        encoder.encodeSerializableValue(ThreatEntryMetadataSurrogate.serializer(), surrogate)
    }

}

@Serializable
class ThreatEntryMetadataSurrogate(
    val entries: List<@Serializable(with = MetadataPairSerializer::class) Pair<String, String>> = emptyList()
)
